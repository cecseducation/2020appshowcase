//
//  ViewController.swift
//  MCSA App 3
//
//  Created by Robert Lee on 5/10/20.
//  Copyright Â© 2020 Robert Lee. All rights reserved.
//
 
import UIKit
import MessageUI
import AVFoundation
import AVKit
 
class ViewController: UIViewController, MFMailComposeViewControllerDelegate {
 
    @IBOutlet weak var videoView: UIView!
    @IBOutlet weak var emailOutlet: UIButton!
    
    override func viewDidLoad() {
        super.viewDidLoad()
        emailOutlet.layer.cornerRadius = 15
        
    }
 
    private func setupView() {
        let path = URL(fileURLWithPath: Bundle.main.path(forResource: "Banner1", ofType: "mov")!)
        let player = AVPlayer(url: path)
        
        let newLayer = AVPlayerLayer(player: player)
        newLayer.frame = self.videoView.frame
        self.videoView.layer.addSublayer(newLayer)
        newLayer.videoGravity = AVLayerVideoGravity.resizeAspectFill
        
        player.play()
    }
    @IBAction func emailButton(_ sender: Any)
    {
        let mailComposeViewerController = configuredMailComposeViewController()
        
        if MFMailComposeViewController.canSendMail()
        {
            self.present(mailComposeViewerController, animated: true)
        }
        else
        {
            self.showSendMailErrorAlert()
    }
}
 
    func configuredMailComposeViewController() -> MFMailComposeViewController
    {
        let mailComposeVC = MFMailComposeViewController()
        mailComposeVC.mailComposeDelegate = self
        
        mailComposeVC.setToRecipients(["relee3@cps.edu"])
        mailComposeVC.setSubject("Tech Support Needed ASAP!!!")
        mailComposeVC.setMessageBody("Tech Support is Needed", isHTML: false)
        
        return mailComposeVC
}
 
    func showSendMailErrorAlert()
{
    let alert = UIAlertController(title: "could not send mail", message: "Unable to send mail. Please check your email configuration and try again.", preferredStyle: .alert)
    alert.addAction(UIAlertAction(title: "OK", style: .default, handler: nil))
    self.present(alert, animated: true, completion: nil)
}
 
    func mailComposeController(_ controller: MFMailComposeViewController, didFinishWith result: MFMailComposeResult, error: Error?) {
        switch result {
        case MFMailComposeResult.cancelled:
            self.dismiss(animated: true, completion: nil)
        case MFMailComposeResult.failed:
            self.showSendMailErrorAlert()
            self.dismiss(animated: true, completion: nil)
        case MFMailComposeResult.sent:
            self.dismiss(animated: true, completion: nil)
        default:
            break
        }
    }
}
 

